EF Core Migrations

Permite Atualizar de forma incremental o esquema de banco de dados e mantem a sincronia com o modelo
de dados do aplicativo, preservando os dados existentes no banco de dados.

Após qualquer alteração no modelo de dados podemos adicionar uma nova migração correspondente que
descreve as atualizações necessárias para manter o esquema de banco de dados em sincronia.

Visual Studio                       NET CLI
{Add-migration <nome>}              {dotnet ef migrations add <nome>} pra usar precisa instalar "dotnet tool install --global dotnet-ef"

O EF Core compara o modelo atual com um instantaneo do modelo antigo para determinar as diferenças e gera arquivos de origem de migração;

Depois que uma nova migração é gerada, é possivel aplica-la a um banco usando os seguintes comandos:

Visual Studio                      NET CLI
{update-database}                  {dotnet ef database update}

O EF Core registra todas as migração aplicadas em uma tabela de historico especial, permitindo que ela saiba quais migrações foram ou não aplicadas.

Outros comandos do Migrations:
Visual Studio               NET CLI
{remove-migration}          {dotnet ef migrations remove}
{get-migration }            {dotnet ef migrations list}

Rodar sem erros => EF Core Migrations -  Requisitos para o Code-Fist

Criar o banco de dados
- Informação sobre o provedor do banco de dados usado (InfraIoC)
- Informação sobre a string de conexão usada (appsettings.json)

"ConnectionStrings": {
    "DefaultConnection": "data source=Servidor; initial catalog=NomeBanco; user id=usuario; password=senha; multipleactiveresultsets=true"
  },

Criar as tabelas
- Definição do arquivo de contexto(AplicacaoDbContext) contendo as configurações e o mapeamento ORM

Rodando de fato Migrations
add-migration Inicial   => Rodar dentro do projeto {Infra.Data}

Ao rodar pela primeira vez, se estiver com o projeto todo configurado e se o projeto {WebUI} realmente não conhecer o {Infra.Data} vai dar um erro
Error - "projeto {WebUI} nao tem referencia Core.Design"
Solução: va até o projeto {Infra.Data} onde esta referenciando o 
<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
</PackageReference>
e troque  <PrivateAssets>all</PrivateAssets> para  <PrivateAssets>none</PrivateAssets>
assim ira permitir que o {Infra.Data} compratilhe o Microsoft.EntityFrameworkCore.Design com {WebUI}

no meu caso eu tinha 2 construtores dentro da minha class, e o EF não estava conseguindo saber qual usar
então criei um contrutor vazio e rodei o comando novamente com sucesso

Outro erro possivel, é o de certificado. basta adicionar + ";TrustServerCertificate=true", na linha de conexao
(configuration.GetConnectionString("DefaultConnection") + ";TrustServerCertificate=true",

Agora só rodar {update database} e sera criada as tabelas e o banco de dados

Popular a tabela via migration
add-migration <NomePopular>

EF Core Migrations - Erros na migração

Pra ter mais detalhes dos erros, use:
add-migration Inicial -verbose

dotnet ef migrations add Inicial --project Projeto.Infra.Data -s projeto.WebUI -c AplicacaoDbContext --verbose

dotnet ef migrations add Inicial => comando para criar a migração com o nome "Inicial"
--project Projeto.Infra.Data     => Define o projeto onde os arquivos de migração serão criados
-s projeto.WebUI                 => Define o projeto ASP.NET Core MVC ou ASP.NET Core Web API
-c AplicacaoDbContext            => Define o nome do arquivo de contexto usado
--verbose                        => exibe mensagens detalhadas do processo de migração